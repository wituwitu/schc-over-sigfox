from Entities.Rule import Rule
from Entities.exceptions import LengthMismatchError
from Messages.Fragment import Fragment
from db.CommonFileStorage import CommonFileStorage as Storage


class Fragmenter:
    """A Fragmenter object, which generates SCHC Fragments
    from a SCHC Packet."""

    def __init__(
            self,
            rule: Rule,
            fragment_dir: str = "debug/sd",
    ) -> None:
        """
        Instantiate a Fragmenter.

        Args:
            profile: (SCHCProfile) SCHC Profile used for the fragmentation
            procedure.
            fragment_dir: (str) Directory where to store the fragments,
        """
        self.RULE: Rule = rule
        self.STORAGE: Storage = Storage(
            f"{fragment_dir}/rule_{self.RULE.ID}")
        self.CURR_FRAG_NUMBER: int = 0

        if not self.STORAGE.folder_exists("fragments"):
            self.STORAGE.create_folder("fragments")

    def get_nb_fragments(self, byte_size: int):
        """ Obtains the number of fragments that would be generated by
        performing the fragmentation procedure of SCHC over a SCHC Packet of a
        certain size.
        """

        payload_byte_length = self.RULE.REGULAR_PAYLOAD_LENGTH
        res = -(byte_size // -payload_byte_length)

        if (self.RULE.HEADER_LENGTH < self.RULE.ALL1_HEADER_LENGTH
                and byte_size % payload_byte_length == 0):
            res += 1

        return res

    def fragment(self, schc_packet: bytes) -> list[Fragment]:
        """
        Generates a list of SCHC Fragments.
        """

        byte_size = len(schc_packet)

        if byte_size > self.RULE.MAX_PACKET_SIZE:
            raise LengthMismatchError(
                "SCHC Packet is larger than allowed"
                f"by Rule {self.RULE.ID}"
            )

        if byte_size == 0:
            raise LengthMismatchError(
                "Cannot fragment a SCHC Packet of size 0."
            )

        reg_pl_len = self.RULE.REGULAR_PAYLOAD_LENGTH
        all1_hd_len = self.RULE.ALL1_HEADER_LENGTH
        hd_len = self.RULE.HEADER_LENGTH

        nb_fragments = self.get_nb_fragments(byte_size)

        fragments = []

        for i in range(nb_fragments):
            all_1 = i == nb_fragments - 1

            if all_1:
                if all1_hd_len > hd_len and byte_size % reg_pl_len == 0:
                    payload_size = 0
                else:
                    payload_size = (byte_size - 1) % reg_pl_len + 1
            else:
                payload_size = reg_pl_len

            payload = schc_packet[i * reg_pl_len:i * reg_pl_len + payload_size]
            fragment = Fragment.generate_frg(self.RULE, payload, i, all_1)
            fragments.append(fragment)

        return fragments

    def clear_fragment_directory(self) -> None:
        for file in self.STORAGE.list_files("fragments"):
            self.STORAGE.delete_file(f"fragments/{file}")
